#!/usr/bin/env python3

"""Create a MAAS virtual test environment"""

from argparse import ArgumentDefaultsHelpFormatter, ArgumentParser
from contextlib import contextmanager
import json
import logging
import sys
from subprocess import PIPE, CalledProcessError, run
from tempfile import NamedTemporaryFile
from textwrap import dedent
from typing import List, Mapping, Optional

from netaddr import IPAddress, IPNetwork

MAAS_VERSION_DEFAULT = "3.1"

MAAS_CLI_PROFILE = "local"

CONTAINER_IFACE = "maas"

NETPLAN_CONF = dedent(
    """\
    network:
      version: 2
      ethernets:
        {iface}:
           dhcp4: false
           dhcp6: false
           addresses:
               - {ipv4_address}
               - {ipv6_address}
    """
)

MAAS_SETUP_COMMANDS = [
    "snap wait system seed.loaded",
    "snap refresh snapd || snap install snapd",
    "snap install maas --channel {snap_channel}",
    "snap install maas-test-db --channel {snap_channel}",
    (
        "maas init region+rack "
        "--database-uri maas-test-db:/// "
        "--maas-url {maas_url}"
    ),
    (
        "maas createadmin "
        "--username {admin_username} "
        "--password {admin_password} "
        "--email {admin_username}@maas"
    ),
    (
        "maas login {maas_cli_profile} {maas_url} "
        "$(maas apikey --username {admin_username})"
    ),
]


LOGGER_RUN = logging.getLogger("run")
LOGGER_LXD = logging.getLogger("lxd")
LOGGER_MAAS = logging.getLogger("maas")

DRY_RUN = False


def get_args():
    parser = ArgumentParser(
        description=__doc__,
        formatter_class=ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        "--admin-username",
        help="MAAS admin username",
        default="maas",
    )
    parser.add_argument(
        "--admin-password",
        help="MAAS admin password",
        default="maas",
    )
    parser.add_argument(
        "--ipv4-subnet",
        help="IPv4 subnet for MAAS-managed machines",
        default="172.16.100.1/24",
    )
    parser.add_argument(
        "--ipv6-subnet",
        help="IPv6 subnet for MAAS-managed machines",
        default="fddf:cafe:cafe:cafe::1/64",
    )
    parser.add_argument(
        "--lxd-network",
        help="the LXD network to create for maas to use",
        default="maas",
    )
    parser.add_argument(
        "--maas-container",
        help="name of the MAAS container to create",
        default="maas",
    )
    parser.add_argument(
        "--container-image",
        help="name of the LXD image for the MAAS container",
        default="f",
    )
    parser.add_argument(
        "--maas-channel",
        help="snap channel for MAAS install",
        default=f"{MAAS_VERSION_DEFAULT}/stable",
    )
    parser.add_argument(
        "--dry-run",
        help="only print out commands",
        action="store_true",
        default=False,
    )
    parser.add_argument(
        "--debug",
        action="store_true",
        default=False,
        help="print debug messages",
    )
    return parser.parse_args()


def setup_logging(debug=False):
    logging.basicConfig(
        level=logging.DEBUG if debug else logging.INFO,
        format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    )


def lxc(*args: str, input: Optional[str] = None):
    cmd = ["lxc"]
    cmd.extend(args)
    LOGGER_RUN.debug(" ".join(cmd))
    if DRY_RUN:
        return
    process = run(cmd, input=input, stdout=PIPE, stderr=PIPE)
    process.check_returncode()
    return process.stdout.decode()


def lxc_push_file(container_name: str, content: str, dest_path: str, mode: str = ""):
    with NamedTemporaryFile(buffering=0) as fd:
        fd.write(content.encode())
        command = ["file", "push", fd.name, container_name + dest_path]
        if mode:
            command.extend(["--mode", mode])
        lxc(*command)


def cli_opts(options: Mapping) -> List[str]:
    return [f"{key}={value}" for key, value in options.items()]


def setup_lxd_network(network: str, ipv4_network: IPNetwork, ipv6_network: IPNetwork):
    LOGGER_LXD.info(f"setting up the {network} network in LXD")
    net_config = {
        "dns.mode": "none",
        "ipv4.address": str(ipv4_network),
        "ipv4.dhcp": "false",
        "ipv6.address": str(ipv6_network),
        "ipv6.dhcp": "false",
    }
    lxc(
        "network",
        "create",
        network,
        *cli_opts(net_config),
    )


def maas(container_name: str, *args: str):
    output = lxc("exec", container_name, "--", "maas", MAAS_CLI_PROFILE, *args)
    if output:
        return json.loads(output)


def setup_maas_container(
    container_name: str,
    image_name: str,
    network_name: str,
    ipv4_address: IPNetwork,
    ipv6_address: IPNetwork,
):
    LOGGER_LXD.info(f"creating the {container_name} container for MAAS")
    lxc("init", image_name, container_name)
    lxc(
        "network",
        "attach",
        network_name,
        container_name,
        CONTAINER_IFACE,
        CONTAINER_IFACE,
    )
    lxc_push_file(
        container_name,
        NETPLAN_CONF.format(
            iface=CONTAINER_IFACE,
            ipv4_address=ipv4_address,
            ipv6_address=ipv6_address,
        ),
        "/etc/netplan/50-maas.yaml",
    )
    lxc("start", container_name)


def install_maas(
    container_name: str,
    snap_channel: str,
    maas_address: IPAddress,
    admin_username: str,
    admin_password: str,
):
    LOGGER_MAAS.info(f"installing MAAS in the {container_name} container")
    for command in MAAS_SETUP_COMMANDS:
        command = command.format(
            snap_channel=snap_channel,
            maas_url=f"http://{maas_address}:5240/MAAS",
            maas_cli_profile=MAAS_CLI_PROFILE,
            admin_username=admin_username,
            admin_password=admin_password,
        )
        lxc("exec", container_name, "--", "bash", "-c", command)


def configure_maas(
    container_name: str,
    ipv4_address: IPNetwork,
):
    subnets = maas(container_name, "subnets", "read")
    for subnet in subnets:
        if subnet["cidr"] == str(ipv4_address.cidr):
            break
    subnet_id = subnet["id"]
    fabric = subnet["vlan"]["fabric"]
    vid = str(subnet["vlan"]["vid"])
    maas(
        container_name, "ipranges", "create", f"subnet={subnet_id}",
        "type=dynamic", f"start_ip={ipv4_address[100]}", f"end_ip={ipv4_address[150]}",
    )

    system_id = maas(container_name, "region-controllers", "read")[0]["system_id"]
    maas(container_name, "vlan", "update", fabric, vid, f"primary_rack={system_id}", "dhcp_on=true")


def setup_lxd(args):
    ipv4_network = IPNetwork(args.ipv4_subnet)
    ipv6_network = IPNetwork(args.ipv6_subnet)
    net_ipv4 = addr_as_net(ipv4_network, 1)
    net_ipv6 = addr_as_net(ipv6_network, 1)
    maas_ipv4 = addr_as_net(ipv4_network, 2)
    maas_ipv6 = addr_as_net(ipv6_network, 2)
    setup_lxd_network(args.lxd_network, net_ipv4, net_ipv6)
    setup_maas_container(
        args.maas_container,
        args.container_image,
        args.lxd_network,
        maas_ipv4,
        maas_ipv6,
    )
    install_maas(
        args.maas_container,
        args.maas_channel,
        maas_ipv4.ip,
        args.admin_username,
        args.admin_password,
    )
    configure_maas(
        args.maas_container,
        net_ipv4,
    )


def addr_as_net(net: IPNetwork, index: int):
    return IPNetwork(f"{net[index]}/{net.prefixlen}")


@contextmanager
def exit_on_failed_command():
    try:
        yield
    except CalledProcessError as error:
        LOGGER_RUN.error(
            f"Command {error.cmd} failed:\n" + error.stderr.decode(),
        )
        sys.exit(1)


def main():
    args = get_args()
    setup_logging(args.debug)
    global DRY_RUN
    DRY_RUN = args.dry_run
    with exit_on_failed_command():
        setup_lxd(args)


if __name__ == "__main__":
    main()
